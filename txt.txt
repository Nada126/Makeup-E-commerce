i want the same thing with the lipstick component ot happen to the lipliner component as to have page on its own and when from the product main page to go to the lipliner page to go the lipliner component with the categories of the lipliner shown and lipliner only have a pencil category in it as in it is only two pencils from the api

<div class="container my-5" style="margin-top: 100px;">
    <h2 class="text-center text-uppercase mb-4">Lip Liner Products</h2>

    @if (loading) {
    <div class="text-center my-5">
        <div class="spinner-border text-dark"></div>
        <p>Loading lipliner products...</p>
    </div>
    } @else {

    <!-- Lip Categories -->
    <div class="d-flex justify-content-center flex-wrap gap-2 mb-4">
        <button class="btn btn-outline-dark"
                [class.active]="selectedType === 'All'"
                (click)="filterByType('All')">
            All Lip Liner Products ({{ products.length }})
        </button>
        @for (type of lipCategories; track $index) {
        <button class="btn btn-outline-dark"
                [class.active]="selectedType === type"
                (click)="filterByType(type)">
            {{ type.replace('_', ' ') | titlecase }}
        </button>
        }
    </div>

    <!-- Results Info -->
    <div class="text-center mb-3">
        <p class="text-muted">
            Showing {{ filteredProducts.length }} products
            @if (selectedType !== 'All') {
            in <strong>{{ selectedType.replace('_', ' ') | titlecase }}</strong>
            }
        </p>
        @if (filteredProducts.length === 0 && selectedType !== 'All') {
        <div class="alert alert-warning">
            No products found in this category. Try "All Lip Liner Products".
        </div>
        }
    </div>

    <!-- Product Grid -->
    <div class="row">
        @for (product of pagedProducts; track product.id ?? $index) {
        <div class="col-md-3 col-sm-6 mb-4">
            <div class="card h-100 shadow-sm">
                <img [src]="product.image_link || 'https://via.placeholder.com/200'"
                     class="card-img-top"
                     alt="{{ product.name }}"
                     style="height: 200px; object-fit: cover;">
                <div class="card-body text-center d-flex flex-column">
                    <h6 class="card-title">{{ product.name }}</h6>
                    <p class="text-muted mb-1">{{ product.brand || 'Unknown Brand' }}</p>
                    <small class="text-info mb-2">Type: {{ product.product_type || 'N/A' }}</small>
                    <small class="text-info mb-2">Category: {{ product.category || 'N/A' }}</small>
                    <p class="mt-auto"><strong>${{ product.price || 'N/A' }}</strong></p>
                    <button class="btn btn-dark btn-sm mt-auto"
                            (click)="addToCart(product)">
                        Add to Cart
                    </button>
                </div>
            </div>
        </div>
        }
    </div>

    <!-- Pagination -->
    @if (totalPages > 1) {
    <nav class="d-flex justify-content-center mt-4">
        <ul class="pagination">
            <li class="page-item" [class.disabled]="currentPage === 1">
                <button class="page-link" (click)="changePage(currentPage - 1)">Previous</button>
            </li>
            @for (page of totalPagesArray; track $index) {
            <li class="page-item" [class.active]="currentPage === page">
                <button class="page-link" (click)="changePage(page)">{{ page }}</button>
            </li>
            }
            <li class="page-item" [class.disabled]="currentPage === totalPages">
                <button class="page-link" (click)="changePage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
    }
    }
</div>
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { Product } from '../../modules/Product';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-lip-liner',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './lip-liner.html',
  styleUrls: ['./lip-liner.css']
})
export class LipLiner implements OnInit {
  products: Product[] = [];
  filteredProducts: Product[] = [];

  // These should match the 'category' values from the API
  lipCategories: string[] = ['pencil'];
  selectedType = 'All';

  currentPage = 1;
  itemsPerPage = 25;
  loading = false;

  constructor(private http: HttpClient, private router: Router) {} // Add Router here

  // Add navigation method to go back to main products
  navigateToProducts() {
    this.router.navigate(['/']);
  }

  ngOnInit() {
    this.fetchLipProducts();
  }

  fetchLipProducts() {
    this.loading = true;
    const url = 'https://makeup-api.herokuapp.com/api/v1/products.json?product_type=lip_liner';

    this.http.get<Product[]>(url).subscribe({
      next: (data) => {
        this.products = data;
        this.filteredProducts = data;

        // Debug: Check what categories are actually available
        const availableCategories = [...new Set(data.map(p => p.category).filter(Boolean))];
        console.log('Available categories in data:', availableCategories);

        // Also check what product_category contains
        const availableProductCategories = [...new Set(data.map(p => p.product_category).filter(Boolean))];
        console.log('Available product_categories in data:', availableProductCategories);

        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching lip products:', err);
        this.loading = false;
      }
    });
  }

  get totalPages(): number {
    return Math.ceil(this.filteredProducts.length / this.itemsPerPage);
  }

  get totalPagesArray(): number[] {
    return Array.from({ length: this.totalPages }, (_, i) => i + 1);
  }

  get pagedProducts(): Product[] {
    const start = (this.currentPage - 1) * this.itemsPerPage;
    return this.filteredProducts.slice(start, start + this.itemsPerPage);
  }

  filterByType(type: string) {
    this.selectedType = type;

    if (type === 'All') {
      this.filteredProducts = this.products;
    } else {
      // Filter by the 'category' field from the API
      this.filteredProducts = this.products.filter(p => {
        if (!p.category) return false;

        const productCategory = p.category.toLowerCase().trim();
        const filterType = type.toLowerCase().trim();

        return productCategory === filterType;
      });
    }

    console.log(`Filtered by ${type}:`, this.filteredProducts.length, 'products found');
    this.currentPage = 1;
  }

  changePage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }

  addToCart(product: Product) {
    alert(`${product.name} added to cart!`);
  }

}
<div class="container my-5" style="margin-top: 100px;">
    <h2 class="text-center text-uppercase mb-4">Lip Products</h2>

    @if (loading) {
    <div class="text-center my-5">
        <div class="spinner-border text-dark"></div>
        <p>Loading lip products...</p>
    </div>
    } @else {

    <!-- Lip Categories -->
    <div class="d-flex justify-content-center flex-wrap gap-2 mb-4">
        <button class="btn btn-outline-dark"
                [class.active]="selectedType === 'All'"
                (click)="filterByType('All')">
            All Lip Products ({{ products.length }})
        </button>
        @for (type of lipCategories; track $index) {
        <button class="btn btn-outline-dark"
                [class.active]="selectedType === type"
                (click)="filterByType(type)">
            {{ type.replace('_', ' ') | titlecase }}
        </button>
        }
    </div>

    <!-- Results Info -->
    <div class="text-center mb-3">
        <p class="text-muted">
            Showing {{ filteredProducts.length }} products
            @if (selectedType !== 'All') {
            in <strong>{{ selectedType.replace('_', ' ') | titlecase }}</strong>
            }
        </p>
        @if (filteredProducts.length === 0 && selectedType !== 'All') {
        <div class="alert alert-warning">
            No products found in this category. Try "All Lip Products".
        </div>
        }
    </div>

    <!-- Product Grid -->
    <div class="row">
        @for (product of pagedProducts; track product.id ?? $index) {
        <div class="col-md-3 col-sm-6 mb-4">
            <div class="card h-100 shadow-sm">
                <img [src]="product.image_link || 'https://via.placeholder.com/200'"
                     class="card-img-top"
                     alt="{{ product.name }}"
                     style="height: 200px; object-fit: cover;">
                <div class="card-body text-center d-flex flex-column">
                    <h6 class="card-title">{{ product.name }}</h6>
                    <p class="text-muted mb-1">{{ product.brand || 'Unknown Brand' }}</p>
                    <small class="text-info mb-2">Type: {{ product.product_type || 'N/A' }}</small>
                    <small class="text-info mb-2">Category: {{ product.category || 'N/A' }}</small>
                    <p class="mt-auto"><strong>${{ product.price || 'N/A' }}</strong></p>
                    <button class="btn btn-dark btn-sm mt-auto"
                            (click)="addToCart(product)">
                        Add to Cart
                    </button>
                </div>
            </div>
        </div>
        }
    </div>

    <!-- Pagination -->
    @if (totalPages > 1) {
    <nav class="d-flex justify-content-center mt-4">
        <ul class="pagination">
            <li class="page-item" [class.disabled]="currentPage === 1">
                <button class="page-link" (click)="changePage(currentPage - 1)">Previous</button>
            </li>
            @for (page of totalPagesArray; track $index) {
            <li class="page-item" [class.active]="currentPage === page">
                <button class="page-link" (click)="changePage(page)">{{ page }}</button>
            </li>
            }
            <li class="page-item" [class.disabled]="currentPage === totalPages">
                <button class="page-link" (click)="changePage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
    }
    }
</div>
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Product } from '../../../app/modules/Product';
import { Router, RouterModule } from '@angular/router'; // Make sure Router is imported

@Component({
  selector: 'app-lipstick-page',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './lipstick-page.html',
  styleUrls: ['./lipstick-page.css']
})
export class LipstickPage implements OnInit {
  products: Product[] = [];
  filteredProducts: Product[] = [];

  // These should match the 'category' values from the API
  lipCategories: string[] = ['lipstick', 'lip_gloss', 'liquid', 'lip_stain'];
  selectedType = 'All';

  currentPage = 1;
  itemsPerPage = 25;
  loading = false;

  constructor(private http: HttpClient, private router: Router) {} // Add Router here

  // Add navigation method to go back to main products
  navigateToProducts() {
    this.router.navigate(['/']);
  }

  ngOnInit() {
    this.fetchLipProducts();
  }

  fetchLipProducts() {
    this.loading = true;
    const url = 'https://makeup-api.herokuapp.com/api/v1/products.json?product_type=lipstick';

    this.http.get<Product[]>(url).subscribe({
      next: (data) => {
        this.products = data;
        this.filteredProducts = data;

        // Debug: Check what categories are actually available
        const availableCategories = [...new Set(data.map(p => p.category).filter(Boolean))];
        console.log('Available categories in data:', availableCategories);

        // Also check what product_category contains
        const availableProductCategories = [...new Set(data.map(p => p.product_category).filter(Boolean))];
        console.log('Available product_categories in data:', availableProductCategories);

        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching lip products:', err);
        this.loading = false;
      }
    });
  }

  get totalPages(): number {
    return Math.ceil(this.filteredProducts.length / this.itemsPerPage);
  }

  get totalPagesArray(): number[] {
    return Array.from({ length: this.totalPages }, (_, i) => i + 1);
  }

  get pagedProducts(): Product[] {
    const start = (this.currentPage - 1) * this.itemsPerPage;
    return this.filteredProducts.slice(start, start + this.itemsPerPage);
  }

  filterByType(type: string) {
    this.selectedType = type;

    if (type === 'All') {
      this.filteredProducts = this.products;
    } else {
      // Filter by the 'category' field from the API
      this.filteredProducts = this.products.filter(p => {
        if (!p.category) return false;

        const productCategory = p.category.toLowerCase().trim();
        const filterType = type.toLowerCase().trim();

        return productCategory === filterType;
      });
    }

    console.log(`Filtered by ${type}:`, this.filteredProducts.length, 'products found');
    this.currentPage = 1;
  }

  changePage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }

  addToCart(product: Product) {
    alert(`${product.name} added to cart!`);
  }
}
import { Routes } from '@angular/router';
import { LipstickPage } from './Components/lipstick-page/lipstick-page';
import { ProductPage } from './Components/product-page/product-page';
import { LipLiner } from './Components/lip-liner/lip-liner';

export const routes: Routes = [
  {
    path: '',
    component: ProductPage // Main page with all products
  },
  {
    path: 'lipstick',
    component: LipstickPage
  },
  {
    path: 'lipliner',
    component: LipLiner
  }
];
